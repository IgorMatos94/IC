#1 LOAD PACKAGES----------------------------------------------------------------

# a vector listing package names needed 

package.list <- c("here", #so I don't have to deal with setting a WD
                  "vegan", #
                  "tidyverse", #data cleaning
                  "dplyr", #data cleaning
                  "ggplot2",
                  "lubridate",
                  "corrplot",
                  "reshape2",
                  "tseries",
                  "stats"
)


#installing the packages if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()
                               [,"Package"])]

if(length(new.packages)) install.packages(new.packages)

#and loading the packages into R with a for loop
for(i in package.list){library(i, character.only = T)}


#2 LOAD DATA--------------------------------------------------------------------
captures_all <- readr::read_csv(here::here("dados", "cap_rate_mes - cap_rate_mes.csv"))

captures_frug <- readr::read_csv(here::here("dados", "cap_rate_mes_frug.csv"))

captures_insec <- readr::read_csv(here::here("dados", "cap_rate_mes_insect.csv"))

seeds_sync <- readr::read_csv(here::here("dados", "seeds_sync.csv"))

dados_att <-  readr::read_csv2(here::here("dados", "dados_att.csv"))

#3 DATA CLEANING AND ORGANIZING-------------------------------------------------

# 1. Criar a tabela com agregações
# Agrupa os dados por mês (DATE) e calcula totais de indivíduos, frutificações, e espécies
tabela_final <- dados_att %>%
  group_by(DATE) %>%
  summarise(
    total_individuos = 361,  # Valor fixo: número total de indivíduos por mês
    total_frutificando = n_distinct(Tag),  # Número de indivíduos frutificando por mês
    total_especies = 73,  # Valor fixo: número total de espécies por mês
    especies_frutificando = n_distinct(Species)  # Número de espécies frutificando por mês
  )

# Renomear a primeira coluna para "mes"
colnames(tabela_final)[1] = "mes"

# 2. Adicionar a taxa de captura no dataset captures_all
# Divide o número de capturas pelo esforço (rede_hora) para obter a taxa de captura
captures_all$taxa <- captures_all$caps / captures_all$rede_hora

# 3. Selecionar colunas que serão utilizadas
# Seleciona as colunas necessárias do dataset captures_all
captures_all <- captures_all %>% select(2, 3, 4, 5)

# Seleciona as colunas necessárias do dataset captures_frug
captures_frug <- captures_frug %>% select(2, 3, 4, 5, 6)

# Seleciona as colunas necessárias do dataset captures_insec
captures_insec <- captures_insec %>% select(2, 5, 6)

# 4. Combinar tabelas
# Junta captures_all e tabela_final usando "mes" como chave, mantendo todas as linhas de captures_all
master <- merge(x = captures_all, y = tabela_final, by = "mes", all.x = TRUE)

# Junta a tabela master com captures_frug usando "mes" como chave, mantendo todas as linhas de master
master <- merge(x = master, y = captures_frug, by = "mes", all.x = TRUE)

#Junta a tabela master com captures_insec usando "mes" como chave, mantendo todas as linhas de master
master <- merge(x = master, y = captures_insec, by = "mes", all.x = TRUE)

# 5. Renomear colunas e adicionar novas variáveis
# Renomear as colunas para "Prop.Capt.Frug."
colnames(master)[12] = "Prop.Capt.Frug."
colnames(master)[14] = "Prop.Capt.Ins."

# Calcula a proporção de indivíduos frutificando
master$Prop.Ind.Frut. <- master$total_frutificando / master$total_individuos

# Calcula a proporção de espécies frutificando
master$Prop.Esp.Frut. <- master$especies_frutificando / master$total_especies

# Calcula a proporção de capturas totais
master$Prop.Capt.Tot <- master$caps / master$rede_hora.x

# 6. Selecionar apenas as colunas necessárias para análise
# Extrai as colunas selecionadas de interesse, incluindo as proporções criadas
master1 <- master %>% select(2, 12, 14, 15, 16, 17)

# 7. Transformar o dataframe em formato longo
# Usa a função gather() para reorganizar as colunas de proporção em formato longo
dados <- tidyr::gather(master1, key = "variavel", value = "valor", -sessao.x)


###############################GRÁFICO ALL DATA#########################################
###############################################################

# 8. Definir símbolos para o gráfico
# Especifica manualmente os símbolos que serão usados no gráfico
meus_simbolos <- c(15, 19, 17, 18, 23)  # Exemplo de símbolos diferentes

# 9. Criar o gráfico de linhas conectadas
# Gera o gráfico com diferentes cores e formas para cada variável (proporções)
ggplot(data = dados, aes(x = sessao.x, y = valor, color = variavel, shape = variavel, group = variavel)) +
  
  # Adiciona as linhas conectando os pontos
  geom_line() +  
  
  # Adiciona os pontos com tamanho ajustado
  geom_point(size = 5) +  
  
  # Define os rótulos e títulos
  labs(title = "Proporção de frutificação e captura de aves",
       x = "Meses",
       y = "Proporção",  # Rótulo do eixo y principal
       color = "Legenda",
       shape = "Legenda") +
  
  # Define os símbolos manualmente
  scale_shape_manual(values = meus_simbolos) +  
  
  # Define as cores manualmente
  scale_color_manual(values = c("#6A0207", "#5B7C91", "#F19E14", "#3B5708", "#E86652")) +  
  
  # Define o eixo x com intervalos e rótulos personalizados
  scale_x_continuous(breaks = 1:12,  
                     labels = c("Ago", "Set", "Out\n\n2022", "Nov", "Dez",
                                "Jan", "Fev", "Mar", "Abr\n\n2023", "Mai", "Jun", "Jul")) +
  
  # Adiciona o eixo y secundário para o tempo em horas de captura
  scale_y_continuous(
    sec.axis = sec_axis(~ ., name = "Tempo de captura (horas)")  # Transforma o eixo secundário e adiciona o rótulo
  ) +
  
  # Define o tema minimalista para o gráfico
  theme_minimal() +
  
  # Ajusta o tema para incluir as modificações necessárias
  theme(
    axis.title.y.right = element_text(color = "black", size = 12),  # Personaliza o eixo y secundário (tempo de captura)
    axis.text.y.right = element_text(color = "black"),  # Cor do texto no eixo secundário
    legend.position = "top"  # Ajusta a posição da legenda
  ) +
  
  # Garante que o eixo y comece no zero
  expand_limits(y = 0)

#######################################GRÁFICO POR ESPÉCIE###################################

# 6. Selecionar apenas as colunas necessárias para análise
# Extrai as colunas selecionadas de interesse, incluindo as proporções criadas
master2 <- master1 %>% select(1, 5, 2, 6)

# 7. Transformar o dataframe em formato longo
# Usa a função gather() para reorganizar as colunas de proporção em formato longo
dados2 <- tidyr::gather(master2, key = "variavel", value = "valor", -sessao.x)


###############################GRÁFICO ALL DATA#########################################
###############################################################

# 8. Definir símbolos para o gráfico
# Especifica manualmente os símbolos que serão usados no gráfico
meus_simbolos <- c(15, 19, 17, 18, 23)  # Exemplo de símbolos diferentes

# 9. Criar o gráfico de linhas conectadas
# Gera o gráfico com diferentes cores e formas para cada variável (proporções)
ggplot(data = dados2, aes(x = sessao.x, y = valor, color = variavel, shape = variavel, group = variavel)) +
  
  # Adiciona as linhas conectando os pontos
  geom_line() +  
  
  # Adiciona os pontos com tamanho ajustado
  geom_point(size = 5) +  
  
  # Define os rótulos e títulos
  labs(title = "Proporção de frutificação e captura de aves",
       x = "Meses",
       y = "Proporção",  # Rótulo do eixo y principal
       color = "Legenda",
       shape = "Legenda") +
  
  # Define os símbolos manualmente
  scale_shape_manual(values = meus_simbolos) +  
  
  # Define as cores manualmente
  scale_color_manual(values = c("#6A0207", "#5B7C91", "#F19E14", "#3B5708", "#E86652")) +  
  
  # Define o eixo x com intervalos e rótulos personalizados
  scale_x_continuous(breaks = 1:12,  
                     labels = c("Ago", "Set", "Out\n\n2022", "Nov", "Dez",
                                "Jan", "Fev", "Mar", "Abr\n\n2023", "Mai", "Jun", "Jul")) +
  
  # Adiciona o eixo y secundário para o tempo em horas de captura
  scale_y_continuous(
    sec.axis = sec_axis(~ ., name = "Tempo de captura (horas)")  # Transforma o eixo secundário e adiciona o rótulo
  ) +
  
  # Define o tema minimalista para o gráfico
  theme_minimal() +
  
  # Ajusta o tema para incluir as modificações necessárias
  theme(
    axis.title.y.right = element_text(color = "black", size = 12),  # Personaliza o eixo y secundário (tempo de captura)
    axis.text.y.right = element_text(color = "black"),  # Cor do texto no eixo secundário
    legend.position = "top"  # Ajusta a posição da legenda
  ) +
  
  # Garante que o eixo y comece no zero
  expand_limits(y = 0)


############################################GRÁFICO POR INDIVÍDUO############################

# 6. Selecionar apenas as colunas necessárias para análise
# Extrai as colunas selecionadas de interesse, incluindo as proporções criadas
master3 <- master1 %>% select(1, 4, 2, 6)

# 7. Transformar o dataframe em formato longo
# Usa a função gather() para reorganizar as colunas de proporção em formato longo
dados3 <- tidyr::gather(master3, key = "variavel", value = "valor", -sessao.x)

# 8. Definir símbolos para o gráfico
# Especifica manualmente os símbolos que serão usados no gráfico
meus_simbolos <- c(15, 19, 17, 18, 23)  # Exemplo de símbolos diferentes

# 9. Criar o gráfico de linhas conectadas
# Gera o gráfico com diferentes cores e formas para cada variável (proporções)
ggplot(data = dados3, aes(x = sessao.x, y = valor, color = variavel, shape = variavel, group = variavel)) +
  
  # Adiciona as linhas conectando os pontos
  geom_line() +  
  
  # Adiciona os pontos com tamanho ajustado
  geom_point(size = 5) +  
  
  # Define os rótulos e títulos
  labs(title = "Proporção de frutificação e captura de aves",
       x = "Meses",
       y = "Proporção",  # Rótulo do eixo y principal
       color = "Legenda",
       shape = "Legenda") +
  
  # Define os símbolos manualmente
  scale_shape_manual(values = meus_simbolos) +  
  
  # Define as cores manualmente
  scale_color_manual(values = c("#6A0207", "#5B7C91", "#F19E14", "#3B5708", "#E86652")) +  
  
  # Define o eixo x com intervalos e rótulos personalizados
  scale_x_continuous(breaks = 1:12,  
                     labels = c("Ago", "Set", "Out\n\n2022", "Nov", "Dez",
                                "Jan", "Fev", "Mar", "Abr\n\n2023", "Mai", "Jun", "Jul")) +
  
  # Adiciona o eixo y secundário para o tempo em horas de captura
  scale_y_continuous(
    sec.axis = sec_axis(~ ., name = "Tempo de captura (horas)")  # Transforma o eixo secundário e adiciona o rótulo
  ) +
  
  # Define o tema minimalista para o gráfico
  theme_minimal() +
  
  # Ajusta o tema para incluir as modificações necessárias
  theme(
    axis.title.y.right = element_text(color = "black", size = 12),  # Personaliza o eixo y secundário (tempo de captura)
    axis.text.y.right = element_text(color = "black"),  # Cor do texto no eixo secundário
    legend.position = "top"  # Ajusta a posição da legenda
  ) +
  
  # Garante que o eixo y comece no zero
  expand_limits(y = 0)


############################################################################################
#############################DURAÇÃO########################################
######################################################################

# Gráfico de duração de sementes encontradas nas amostras
# com pontos de início e fim na mesma cor que as linhas

# Criação do gráfico utilizando ggplot2
duracao_pheno_birds <- ggplot(seeds_sync, 
                              aes(x = com, y = spp, xend = fim, yend = spp, group = cat, color = factor(classe))) +
  
  # Adiciona segmentos de linha representando a duração de um evento
  geom_segment(size = 2) +
  
  # Adiciona pontos para o início dos eventos
  geom_point(aes(color = factor(classe)), size = 3.5) +  
  
  # Adiciona pontos para o fim dos eventos, mantendo a mesma cor
  geom_point(aes(x = fim, y = spp, color = factor(classe)), size = 3.5) +
  
  # Define os rótulos dos eixos, título do gráfico e legenda
  labs(
    title = "Relação entre presença de frutos e sementes em fezes de aves",  # Título do gráfico
    x = "Meses",   # Eixo x: Meses do ano
    y = "Espécies",   # Eixo y: Espécies estudadas
    color = "Categorias"  # Título da legenda
  ) +
  
  # Define as cores para as categorias, além de remover o NA da legenda
  scale_color_manual(
    values = c("1" = "#6A0207", "2" = "#3B5708", "NA" = "white"),  # Cores para sementes coletadas e árvores frutificando
    labels = c("Sementes coletadas", "Árvores frutificando"),  # Rótulos da legenda
    na.translate = FALSE  # Remove a categoria NA da legenda
  ) +
  
  # Ajusta o eixo x para mostrar os meses com rótulos específicos
  scale_x_continuous(
    breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),  # Posições dos meses
    labels = c("A", "S", "O\n\n2022", "N", "D", "J", "F", "M\n\n                                       2023", "A", "M", "J", "J"),  # Rótulos personalizados para os meses
    expand = c(0, 0.2)  # Não expandir o limite do eixo x
  ) +
  
  # Define os rótulos do eixo y com nomes científicos das espécies em itálico
  scale_y_discrete(
    labels = expression(
      italic("Trichilia pallida"), italic("Trichilia pallida"), "", 
      italic("Pera glabrata"), italic("Pera glabrata"), "", 
      italic("Casearia sylvestris"), italic("Casearia sylvestris")
    )
  ) +
  
  # Ajustes estéticos do gráfico
  theme_minimal() +  # Tema minimalista
  theme(
    legend.position = "top",  # Legenda no topo
    axis.text.y = element_text(size = 12),  # Aumenta a fonte no eixo y
    text = element_text(size = 14),  # Aumenta o tamanho geral do texto
    panel.grid.major = element_blank(),  # Remove as linhas principais da grade
    panel.grid.minor = element_blank(),  # Remove as linhas secundárias da grade
    panel.border = element_rect(color = "black", fill = NA, size = 1)  # Adiciona borda ao redor do gráfico
  )

# Salvar o gráfico como uma imagem
ggsave("duracao_pheno_birds.jpg", plot = duracao_pheno_birds, width = 12, height = 8, dpi = 300)


#############################################################################################################
#####################ANÁLISE TEMPORAL#########################################
#############################################################################################################

master_temporal1 <- master %>% select(2, 6, 10)

adf.test(master_temporal1$total_frutificando)
adf.test(master_temporal1$caps_frug)

ccf(master_temporal1$total_frutificando, master_temporal1$caps_frug, lag.max = 12, plot = TRUE)


#############################
# 1. Realizar a correlação cruzada
ccf_result <- ccf(master_temporal1$total_frutificando, master_temporal1$caps_frug, plot = FALSE)

# 2. Criar um data frame para os resultados da CCF
ccf_df <- data.frame(
  lag = ccf_result$lag,
  correlation = ccf_result$acf
)

# 3. Definir o valor de significância (alfa) e número de observações
alpha <- 0.05
n_obs <- length(master_temporal1$total_frutificando)

# 4. Calcular o intervalo de confiança com base na distribuição normal
z_value <- qnorm(1 - alpha / 2)  # Z-value para 95% de confiança
limite_significancia <- z_value / sqrt(n_obs)

# 5. Verificar se os valores de correlação são significativos
ccf_df$significativo <- abs(ccf_df$correlation) > limite_significancia

# 6. Criar o gráfico com destaque para valores significativos
correlacao_temporal <- ggplot(ccf_df, aes(x = lag, y = correlation, fill = significativo)) +
  geom_bar(stat = "identity", color = "black") +  # Barras com contorno
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Linha de referência (0)
  geom_hline(yintercept = limite_significancia, linetype = "dotted", color = "blue") +  # Linha de significância positiva
  geom_hline(yintercept = -limite_significancia, linetype = "dotted", color = "blue") +  # Linha de significância negativa
  scale_fill_manual(values = c("TRUE" = "green", "FALSE" = "grey"), labels = c("Significativo", "Não significativo")) +
  labs(title = "Correlação Cruzada Temporal entre Frutificação e Captura de Aves",
       x = "Lags Temporais (Meses)",
       y = "Correlação",
       fill = "Legenda") +
  theme_minimal() +
  theme(
    text = element_text(size = 14),
    axis.text = element_text(size = 12),
    panel.grid.major = element_line(color = "grey80"),  # Linhas do grid
    panel.grid.minor = element_blank(),  # Sem linhas menores
    plot.title = element_text(hjust = 0.5, size = 16)  # Centralizar o título
  )

# 7. Exibir o gráfico
print(correlacao_temporal)


ggsave("correlação_temporal.jpg", plot = correlacao_temporal, width = 12, height = 8, dpi = 300)
